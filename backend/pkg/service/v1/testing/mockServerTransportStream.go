// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testing

import (
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"sync"
)

// Ensure, that ServerTransportStreamMock does implement grpc.ServerTransportStream.
// If this is not the case, regenerate this file with moq.
var _ grpc.ServerTransportStream = &ServerTransportStreamMock{}

// ServerTransportStreamMock is a mock implementation of grpc.ServerTransportStream.
//
// 	func TestSomethingThatUsesServerTransportStream(t *testing.T) {
//
// 		// make and configure a mocked grpc.ServerTransportStream
// 		mockedServerTransportStream := &ServerTransportStreamMock{
// 			MethodFunc: func() string {
// 				panic("mock out the Method method")
// 			},
// 			SendHeaderFunc: func(md metadata.MD) error {
// 				panic("mock out the SendHeader method")
// 			},
// 			SetHeaderFunc: func(md metadata.MD) error {
// 				panic("mock out the SetHeader method")
// 			},
// 			SetTrailerFunc: func(md metadata.MD) error {
// 				panic("mock out the SetTrailer method")
// 			},
// 		}
//
// 		// use mockedServerTransportStream in code that requires grpc.ServerTransportStream
// 		// and then make assertions.
//
// 	}
type ServerTransportStreamMock struct {
	// MethodFunc mocks the Method method.
	MethodFunc func() string

	// SendHeaderFunc mocks the SendHeader method.
	SendHeaderFunc func(md metadata.MD) error

	// SetHeaderFunc mocks the SetHeader method.
	SetHeaderFunc func(md metadata.MD) error

	// SetTrailerFunc mocks the SetTrailer method.
	SetTrailerFunc func(md metadata.MD) error

	// calls tracks calls to the methods.
	calls struct {
		// Method holds details about calls to the Method method.
		Method []struct {
		}
		// SendHeader holds details about calls to the SendHeader method.
		SendHeader []struct {
			// Md is the md argument value.
			Md metadata.MD
		}
		// SetHeader holds details about calls to the SetHeader method.
		SetHeader []struct {
			// Md is the md argument value.
			Md metadata.MD
		}
		// SetTrailer holds details about calls to the SetTrailer method.
		SetTrailer []struct {
			// Md is the md argument value.
			Md metadata.MD
		}
	}
	lockMethod     sync.RWMutex
	lockSendHeader sync.RWMutex
	lockSetHeader  sync.RWMutex
	lockSetTrailer sync.RWMutex
}

// Method calls MethodFunc.
func (mock *ServerTransportStreamMock) Method() string {
	if mock.MethodFunc == nil {
		panic("ServerTransportStreamMock.MethodFunc: method is nil but ServerTransportStream.Method was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMethod.Lock()
	mock.calls.Method = append(mock.calls.Method, callInfo)
	mock.lockMethod.Unlock()
	return mock.MethodFunc()
}

// MethodCalls gets all the calls that were made to Method.
// Check the length with:
//     len(mockedServerTransportStream.MethodCalls())
func (mock *ServerTransportStreamMock) MethodCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMethod.RLock()
	calls = mock.calls.Method
	mock.lockMethod.RUnlock()
	return calls
}

// SendHeader calls SendHeaderFunc.
func (mock *ServerTransportStreamMock) SendHeader(md metadata.MD) error {
	if mock.SendHeaderFunc == nil {
		panic("ServerTransportStreamMock.SendHeaderFunc: method is nil but ServerTransportStream.SendHeader was just called")
	}
	callInfo := struct {
		Md metadata.MD
	}{
		Md: md,
	}
	mock.lockSendHeader.Lock()
	mock.calls.SendHeader = append(mock.calls.SendHeader, callInfo)
	mock.lockSendHeader.Unlock()
	return mock.SendHeaderFunc(md)
}

// SendHeaderCalls gets all the calls that were made to SendHeader.
// Check the length with:
//     len(mockedServerTransportStream.SendHeaderCalls())
func (mock *ServerTransportStreamMock) SendHeaderCalls() []struct {
	Md metadata.MD
} {
	var calls []struct {
		Md metadata.MD
	}
	mock.lockSendHeader.RLock()
	calls = mock.calls.SendHeader
	mock.lockSendHeader.RUnlock()
	return calls
}

// SetHeader calls SetHeaderFunc.
func (mock *ServerTransportStreamMock) SetHeader(md metadata.MD) error {
	if mock.SetHeaderFunc == nil {
		panic("ServerTransportStreamMock.SetHeaderFunc: method is nil but ServerTransportStream.SetHeader was just called")
	}
	callInfo := struct {
		Md metadata.MD
	}{
		Md: md,
	}
	mock.lockSetHeader.Lock()
	mock.calls.SetHeader = append(mock.calls.SetHeader, callInfo)
	mock.lockSetHeader.Unlock()
	return mock.SetHeaderFunc(md)
}

// SetHeaderCalls gets all the calls that were made to SetHeader.
// Check the length with:
//     len(mockedServerTransportStream.SetHeaderCalls())
func (mock *ServerTransportStreamMock) SetHeaderCalls() []struct {
	Md metadata.MD
} {
	var calls []struct {
		Md metadata.MD
	}
	mock.lockSetHeader.RLock()
	calls = mock.calls.SetHeader
	mock.lockSetHeader.RUnlock()
	return calls
}

// SetTrailer calls SetTrailerFunc.
func (mock *ServerTransportStreamMock) SetTrailer(md metadata.MD) error {
	if mock.SetTrailerFunc == nil {
		panic("ServerTransportStreamMock.SetTrailerFunc: method is nil but ServerTransportStream.SetTrailer was just called")
	}
	callInfo := struct {
		Md metadata.MD
	}{
		Md: md,
	}
	mock.lockSetTrailer.Lock()
	mock.calls.SetTrailer = append(mock.calls.SetTrailer, callInfo)
	mock.lockSetTrailer.Unlock()
	return mock.SetTrailerFunc(md)
}

// SetTrailerCalls gets all the calls that were made to SetTrailer.
// Check the length with:
//     len(mockedServerTransportStream.SetTrailerCalls())
func (mock *ServerTransportStreamMock) SetTrailerCalls() []struct {
	Md metadata.MD
} {
	var calls []struct {
		Md metadata.MD
	}
	mock.lockSetTrailer.RLock()
	calls = mock.calls.SetTrailer
	mock.lockSetTrailer.RUnlock()
	return calls
}
