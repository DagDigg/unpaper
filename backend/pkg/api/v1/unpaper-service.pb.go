// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: api/proto/v1/unpaper-service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ping
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_unpaper_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_unpaper_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_unpaper_service_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

var File_api_proto_v1_unpaper_service_proto protoreflect.FileDescriptor

var file_api_proto_v1_unpaper_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x6e, 0x70, 0x61, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x78, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x32, 0xe6, 0x26, 0x0a, 0x0e, 0x55, 0x6e, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x68, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x4f, 0x6e, 0x65, 0x54, 0x61, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x16, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x45,
	0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x65, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x15, 0x2f,
	0x68, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x3a, 0x53, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x3a, 0x03, 0x72, 0x61, 0x77, 0x12, 0x74, 0x0a, 0x14, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1d, 0x2f, 0x68, 0x31,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x3a, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x3b, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x13,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x19, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b,
	0x65, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x49, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x49, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x77,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39,
	0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0xc4, 0x01, 0x5a, 0x0a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x92, 0x41,
	0xb4, 0x01, 0x12, 0x4e, 0x0a, 0x0b, 0x55, 0x6e, 0x70, 0x61, 0x70, 0x65, 0x72, 0x20, 0x41, 0x50,
	0x49, 0x22, 0x3a, 0x0a, 0x07, 0x75, 0x6e, 0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x44, 0x61, 0x67, 0x44, 0x69, 0x67, 0x67, 0x2f, 0x75, 0x6e, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x1a, 0x0b, 0x66, 0x6f, 0x6f, 0x40, 0x62, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64,
	0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_v1_unpaper_service_proto_rawDescOnce sync.Once
	file_api_proto_v1_unpaper_service_proto_rawDescData = file_api_proto_v1_unpaper_service_proto_rawDesc
)

func file_api_proto_v1_unpaper_service_proto_rawDescGZIP() []byte {
	file_api_proto_v1_unpaper_service_proto_rawDescOnce.Do(func() {
		file_api_proto_v1_unpaper_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_v1_unpaper_service_proto_rawDescData)
	})
	return file_api_proto_v1_unpaper_service_proto_rawDescData
}

var file_api_proto_v1_unpaper_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_proto_v1_unpaper_service_proto_goTypes = []interface{}{
	(*PingRequest)(nil),                             // 0: v1.PingRequest
	(*GoogleLoginRequest)(nil),                      // 1: v1.GoogleLoginRequest
	(*GoogleCallbackRequest)(nil),                   // 2: v1.GoogleCallbackRequest
	(*empty.Empty)(nil),                             // 3: google.protobuf.Empty
	(*EmailSignupRequest)(nil),                      // 4: v1.EmailSignupRequest
	(*EmailSigninRequest)(nil),                      // 5: v1.EmailSigninRequest
	(*EmailVerifyRequest)(nil),                      // 6: v1.EmailVerifyRequest
	(*EmailCheckRequest)(nil),                       // 7: v1.EmailCheckRequest
	(*ChangePasswordRequest)(nil),                   // 8: v1.ChangePasswordRequest
	(*SendResetLinkRequest)(nil),                    // 9: v1.SendResetLinkRequest
	(*ResetPasswordRequest)(nil),                    // 10: v1.ResetPasswordRequest
	(*UpdateUsernameRequest)(nil),                   // 11: v1.UpdateUsernameRequest
	(*FollowUserRequest)(nil),                       // 12: v1.FollowUserRequest
	(*GetFollowersRequest)(nil),                     // 13: v1.GetFollowersRequest
	(*GetFollowingRequest)(nil),                     // 14: v1.GetFollowingRequest
	(*GetFollowingCountRequest)(nil),                // 15: v1.GetFollowingCountRequest
	(*GetFollowersCountRequest)(nil),                // 16: v1.GetFollowersCountRequest
	(*UserInfoRequest)(nil),                         // 17: v1.UserInfoRequest
	(*ExtUserInfoRequest)(nil),                      // 18: v1.ExtUserInfoRequest
	(*CustomerInfoRequest)(nil),                     // 19: v1.CustomerInfoRequest
	(*StripeWebhookRequest)(nil),                    // 20: v1.StripeWebhookRequest
	(*SubscribeToPlanRequest)(nil),                  // 21: v1.SubscribeToPlanRequest
	(*RetryInvoiceRequest)(nil),                     // 22: v1.RetryInvoiceRequest
	(*GetSubscriptionByIDRequest)(nil),              // 23: v1.GetSubscriptionByIDRequest
	(*CreateSetupIntentRequest)(nil),                // 24: v1.CreateSetupIntentRequest
	(*AttachPaymentMethodRequest)(nil),              // 25: v1.AttachPaymentMethodRequest
	(*UpdateSubscriptionRequest)(nil),               // 26: v1.UpdateSubscriptionRequest
	(*InvoicePreviewRequest)(nil),                   // 27: v1.InvoicePreviewRequest
	(*CouponCheckRequest)(nil),                      // 28: v1.CouponCheckRequest
	(*MakeDonationRequest)(nil),                     // 29: v1.MakeDonationRequest
	(*PayRoomEntranceRequest)(nil),                  // 30: v1.PayRoomEntranceRequest
	(*CheckRoomEntrancePIRequest)(nil),              // 31: v1.CheckRoomEntrancePIRequest
	(*SubscribeToRoomRequest)(nil),                  // 32: v1.SubscribeToRoomRequest
	(*ConfirmRoomSubscriptionRequest)(nil),          // 33: v1.ConfirmRoomSubscriptionRequest
	(*RetryRoomSubscriptionRequest)(nil),            // 34: v1.RetryRoomSubscriptionRequest
	(*GetRoomSubscriptionByRoomIDRequest)(nil),      // 35: v1.GetRoomSubscriptionByRoomIDRequest
	(*GetMessagesRequest)(nil),                      // 36: v1.GetMessagesRequest
	(*ListenForMessagesRequest)(nil),                // 37: v1.ListenForMessagesRequest
	(*SendMessageRequest)(nil),                      // 38: v1.SendMessageRequest
	(*SendAwardRequest)(nil),                        // 39: v1.SendAwardRequest
	(*SendDonationRequest)(nil),                     // 40: v1.SendDonationRequest
	(*SendAudioRequest)(nil),                        // 41: v1.SendAudioRequest
	(*CreateListRequest)(nil),                       // 42: v1.CreateListRequest
	(*UpdateListRequest)(nil),                       // 43: v1.UpdateListRequest
	(*GetUserSuggestionsRequest)(nil),               // 44: v1.GetUserSuggestionsRequest
	(*GetListByIDRequest)(nil),                      // 45: v1.GetListByIDRequest
	(*RoomAccessCheckRequest)(nil),                  // 46: v1.RoomAccessCheckRequest
	(*CreateConversationRequest)(nil),               // 47: v1.CreateConversationRequest
	(*GetConversationRequest)(nil),                  // 48: v1.GetConversationRequest
	(*GetConversationsRequest)(nil),                 // 49: v1.GetConversationsRequest
	(*GetConversationWithParticipantsRequest)(nil),  // 50: v1.GetConversationWithParticipantsRequest
	(*ReadNotificationRequest)(nil),                 // 51: v1.ReadNotificationRequest
	(*CreatePostRequest)(nil),                       // 52: v1.CreatePostRequest
	(*GetPostRequest)(nil),                          // 53: v1.GetPostRequest
	(*GetPostsRequest)(nil),                         // 54: v1.GetPostsRequest
	(*CreateCommentRequest)(nil),                    // 55: v1.CreateCommentRequest
	(*LikePostRequest)(nil),                         // 56: v1.LikePostRequest
	(*LikeCommentRequest)(nil),                      // 57: v1.LikeCommentRequest
	(*User)(nil),                                    // 58: v1.User
	(*GoogleLoginResponse)(nil),                     // 59: v1.GoogleLoginResponse
	(*ExtUserInfoResponse)(nil),                     // 60: v1.ExtUserInfoResponse
	(*GetFollowersResponse)(nil),                    // 61: v1.GetFollowersResponse
	(*GetFollowingResponse)(nil),                    // 62: v1.GetFollowingResponse
	(*GetFollowingCountResponse)(nil),               // 63: v1.GetFollowingCountResponse
	(*GetFollowersCountResponse)(nil),               // 64: v1.GetFollowersCountResponse
	(*Customer)(nil),                                // 65: v1.Customer
	(*Invoice)(nil),                                 // 66: v1.Invoice
	(*GetSubscriptionByIDResponse)(nil),             // 67: v1.GetSubscriptionByIDResponse
	(*CreateSetupIntentResponse)(nil),               // 68: v1.CreateSetupIntentResponse
	(*PaymentMethod)(nil),                           // 69: v1.PaymentMethod
	(*CouponCheckResponse)(nil),                     // 70: v1.CouponCheckResponse
	(*GetConnectAccountLinkResponse)(nil),           // 71: v1.GetConnectAccountLinkResponse
	(*ConnectedPaymentIntentResponse)(nil),          // 72: v1.ConnectedPaymentIntentResponse
	(*GetDashboardLinkResponse)(nil),                // 73: v1.GetDashboardLinkResponse
	(*CheckRoomEntrancePIResponse)(nil),             // 74: v1.CheckRoomEntrancePIResponse
	(*SubscribeToRoomResponse)(nil),                 // 75: v1.SubscribeToRoomResponse
	(*GetRoomSubscriptionsResponse)(nil),            // 76: v1.GetRoomSubscriptionsResponse
	(*ConfirmRoomSubscriptionResponse)(nil),         // 77: v1.ConfirmRoomSubscriptionResponse
	(*GetRoomSubscriptionByRoomIDResponse)(nil),     // 78: v1.GetRoomSubscriptionByRoomIDResponse
	(*GetOwnConnectedAccountResponse)(nil),          // 79: v1.GetOwnConnectedAccountResponse
	(*GetMessagesResponse)(nil),                     // 80: v1.GetMessagesResponse
	(*ChatMessage)(nil),                             // 81: v1.ChatMessage
	(*List)(nil),                                    // 82: v1.List
	(*GetUserSuggestionsResponse)(nil),              // 83: v1.GetUserSuggestionsResponse
	(*GetAllListsResponse)(nil),                     // 84: v1.GetAllListsResponse
	(*RoomAccessCheckResponse)(nil),                 // 85: v1.RoomAccessCheckResponse
	(*CreateConversationResponse)(nil),              // 86: v1.CreateConversationResponse
	(*GetConversationResponse)(nil),                 // 87: v1.GetConversationResponse
	(*GetConversationsResponse)(nil),                // 88: v1.GetConversationsResponse
	(*GetConversationWithParticipantsResponse)(nil), // 89: v1.GetConversationWithParticipantsResponse
	(*Notification)(nil),                            // 90: v1.Notification
	(*GetAllNotificationsRes)(nil),                  // 91: v1.GetAllNotificationsRes
	(*ReadNotificationResponse)(nil),                // 92: v1.ReadNotificationResponse
	(*GetMixesRes)(nil),                             // 93: v1.GetMixesRes
	(*CreatePostResponse)(nil),                      // 94: v1.CreatePostResponse
	(*GetPostResponse)(nil),                         // 95: v1.GetPostResponse
	(*GetPostsResponse)(nil),                        // 96: v1.GetPostsResponse
	(*CreateCommentResponse)(nil),                   // 97: v1.CreateCommentResponse
	(*LikePostResponse)(nil),                        // 98: v1.LikePostResponse
	(*LikeCommentResponse)(nil),                     // 99: v1.LikeCommentResponse
}
var file_api_proto_v1_unpaper_service_proto_depIdxs = []int32{
	0,  // 0: v1.UnpaperService.Ping:input_type -> v1.PingRequest
	1,  // 1: v1.UnpaperService.GoogleLogin:input_type -> v1.GoogleLoginRequest
	2,  // 2: v1.UnpaperService.GoogleCallback:input_type -> v1.GoogleCallbackRequest
	3,  // 3: v1.UnpaperService.GoogleOneTap:input_type -> google.protobuf.Empty
	4,  // 4: v1.UnpaperService.EmailSignup:input_type -> v1.EmailSignupRequest
	5,  // 5: v1.UnpaperService.EmailSignin:input_type -> v1.EmailSigninRequest
	6,  // 6: v1.UnpaperService.EmailVerify:input_type -> v1.EmailVerifyRequest
	7,  // 7: v1.UnpaperService.EmailCheck:input_type -> v1.EmailCheckRequest
	8,  // 8: v1.UnpaperService.ChangePassword:input_type -> v1.ChangePasswordRequest
	9,  // 9: v1.UnpaperService.SendResetLink:input_type -> v1.SendResetLinkRequest
	10, // 10: v1.UnpaperService.ResetPassword:input_type -> v1.ResetPasswordRequest
	11, // 11: v1.UnpaperService.UpdateUsername:input_type -> v1.UpdateUsernameRequest
	3,  // 12: v1.UnpaperService.SignOut:input_type -> google.protobuf.Empty
	3,  // 13: v1.UnpaperService.SetUserOnline:input_type -> google.protobuf.Empty
	3,  // 14: v1.UnpaperService.SetUserOffline:input_type -> google.protobuf.Empty
	12, // 15: v1.UnpaperService.FollowUser:input_type -> v1.FollowUserRequest
	13, // 16: v1.UnpaperService.GetFollowers:input_type -> v1.GetFollowersRequest
	14, // 17: v1.UnpaperService.GetFollowing:input_type -> v1.GetFollowingRequest
	15, // 18: v1.UnpaperService.GetFollowingCount:input_type -> v1.GetFollowingCountRequest
	16, // 19: v1.UnpaperService.GetFollowersCount:input_type -> v1.GetFollowersCountRequest
	17, // 20: v1.UnpaperService.UserInfo:input_type -> v1.UserInfoRequest
	18, // 21: v1.UnpaperService.ExtUserInfo:input_type -> v1.ExtUserInfoRequest
	19, // 22: v1.UnpaperService.CustomerInfo:input_type -> v1.CustomerInfoRequest
	20, // 23: v1.UnpaperService.StripeWebhook:input_type -> v1.StripeWebhookRequest
	20, // 24: v1.UnpaperService.StripeConnectWebhook:input_type -> v1.StripeWebhookRequest
	21, // 25: v1.UnpaperService.SubscribeToPlan:input_type -> v1.SubscribeToPlanRequest
	22, // 26: v1.UnpaperService.RetryInvoice:input_type -> v1.RetryInvoiceRequest
	23, // 27: v1.UnpaperService.GetSubscriptionByID:input_type -> v1.GetSubscriptionByIDRequest
	24, // 28: v1.UnpaperService.CreateSetupIntent:input_type -> v1.CreateSetupIntentRequest
	25, // 29: v1.UnpaperService.AttachPaymentMethod:input_type -> v1.AttachPaymentMethodRequest
	26, // 30: v1.UnpaperService.UpdateSubscription:input_type -> v1.UpdateSubscriptionRequest
	27, // 31: v1.UnpaperService.InvoicePreview:input_type -> v1.InvoicePreviewRequest
	28, // 32: v1.UnpaperService.CouponCheck:input_type -> v1.CouponCheckRequest
	3,  // 33: v1.UnpaperService.GetConnectAccountLink:input_type -> google.protobuf.Empty
	29, // 34: v1.UnpaperService.MakeDonation:input_type -> v1.MakeDonationRequest
	30, // 35: v1.UnpaperService.PayRoomEntrance:input_type -> v1.PayRoomEntranceRequest
	3,  // 36: v1.UnpaperService.CreateStripeAccount:input_type -> google.protobuf.Empty
	3,  // 37: v1.UnpaperService.GetDashboardLink:input_type -> google.protobuf.Empty
	31, // 38: v1.UnpaperService.CheckRoomEntrancePI:input_type -> v1.CheckRoomEntrancePIRequest
	32, // 39: v1.UnpaperService.SubscribeToRoom:input_type -> v1.SubscribeToRoomRequest
	3,  // 40: v1.UnpaperService.GetRoomSubscriptions:input_type -> google.protobuf.Empty
	33, // 41: v1.UnpaperService.ConfirmRoomSubscription:input_type -> v1.ConfirmRoomSubscriptionRequest
	34, // 42: v1.UnpaperService.RetryRoomSubscription:input_type -> v1.RetryRoomSubscriptionRequest
	35, // 43: v1.UnpaperService.GetRoomSubscriptionByRoomID:input_type -> v1.GetRoomSubscriptionByRoomIDRequest
	3,  // 44: v1.UnpaperService.GetOwnConnectedAccount:input_type -> google.protobuf.Empty
	36, // 45: v1.UnpaperService.GetMessages:input_type -> v1.GetMessagesRequest
	37, // 46: v1.UnpaperService.ListenForMessages:input_type -> v1.ListenForMessagesRequest
	38, // 47: v1.UnpaperService.SendMessage:input_type -> v1.SendMessageRequest
	39, // 48: v1.UnpaperService.SendAward:input_type -> v1.SendAwardRequest
	40, // 49: v1.UnpaperService.SendDonation:input_type -> v1.SendDonationRequest
	41, // 50: v1.UnpaperService.SendAudio:input_type -> v1.SendAudioRequest
	42, // 51: v1.UnpaperService.CreateList:input_type -> v1.CreateListRequest
	43, // 52: v1.UnpaperService.UpdateList:input_type -> v1.UpdateListRequest
	44, // 53: v1.UnpaperService.GetUserSuggestions:input_type -> v1.GetUserSuggestionsRequest
	3,  // 54: v1.UnpaperService.GetAllLists:input_type -> google.protobuf.Empty
	45, // 55: v1.UnpaperService.GetListByID:input_type -> v1.GetListByIDRequest
	46, // 56: v1.UnpaperService.RoomAccessCheck:input_type -> v1.RoomAccessCheckRequest
	47, // 57: v1.UnpaperService.CreateConversation:input_type -> v1.CreateConversationRequest
	48, // 58: v1.UnpaperService.GetConversation:input_type -> v1.GetConversationRequest
	49, // 59: v1.UnpaperService.GetConversations:input_type -> v1.GetConversationsRequest
	50, // 60: v1.UnpaperService.GetConversationWithParticipants:input_type -> v1.GetConversationWithParticipantsRequest
	3,  // 61: v1.UnpaperService.ListenForNotifications:input_type -> google.protobuf.Empty
	3,  // 62: v1.UnpaperService.GetAllNotifications:input_type -> google.protobuf.Empty
	51, // 63: v1.UnpaperService.ReadNotification:input_type -> v1.ReadNotificationRequest
	3,  // 64: v1.UnpaperService.GetMixes:input_type -> google.protobuf.Empty
	52, // 65: v1.UnpaperService.CreatePost:input_type -> v1.CreatePostRequest
	53, // 66: v1.UnpaperService.GetPost:input_type -> v1.GetPostRequest
	54, // 67: v1.UnpaperService.GetPosts:input_type -> v1.GetPostsRequest
	55, // 68: v1.UnpaperService.CreateComment:input_type -> v1.CreateCommentRequest
	56, // 69: v1.UnpaperService.LikePost:input_type -> v1.LikePostRequest
	57, // 70: v1.UnpaperService.LikeComment:input_type -> v1.LikeCommentRequest
	58, // 71: v1.UnpaperService.Ping:output_type -> v1.User
	59, // 72: v1.UnpaperService.GoogleLogin:output_type -> v1.GoogleLoginResponse
	58, // 73: v1.UnpaperService.GoogleCallback:output_type -> v1.User
	58, // 74: v1.UnpaperService.GoogleOneTap:output_type -> v1.User
	58, // 75: v1.UnpaperService.EmailSignup:output_type -> v1.User
	58, // 76: v1.UnpaperService.EmailSignin:output_type -> v1.User
	3,  // 77: v1.UnpaperService.EmailVerify:output_type -> google.protobuf.Empty
	3,  // 78: v1.UnpaperService.EmailCheck:output_type -> google.protobuf.Empty
	3,  // 79: v1.UnpaperService.ChangePassword:output_type -> google.protobuf.Empty
	3,  // 80: v1.UnpaperService.SendResetLink:output_type -> google.protobuf.Empty
	3,  // 81: v1.UnpaperService.ResetPassword:output_type -> google.protobuf.Empty
	58, // 82: v1.UnpaperService.UpdateUsername:output_type -> v1.User
	3,  // 83: v1.UnpaperService.SignOut:output_type -> google.protobuf.Empty
	3,  // 84: v1.UnpaperService.SetUserOnline:output_type -> google.protobuf.Empty
	3,  // 85: v1.UnpaperService.SetUserOffline:output_type -> google.protobuf.Empty
	60, // 86: v1.UnpaperService.FollowUser:output_type -> v1.ExtUserInfoResponse
	61, // 87: v1.UnpaperService.GetFollowers:output_type -> v1.GetFollowersResponse
	62, // 88: v1.UnpaperService.GetFollowing:output_type -> v1.GetFollowingResponse
	63, // 89: v1.UnpaperService.GetFollowingCount:output_type -> v1.GetFollowingCountResponse
	64, // 90: v1.UnpaperService.GetFollowersCount:output_type -> v1.GetFollowersCountResponse
	58, // 91: v1.UnpaperService.UserInfo:output_type -> v1.User
	60, // 92: v1.UnpaperService.ExtUserInfo:output_type -> v1.ExtUserInfoResponse
	65, // 93: v1.UnpaperService.CustomerInfo:output_type -> v1.Customer
	3,  // 94: v1.UnpaperService.StripeWebhook:output_type -> google.protobuf.Empty
	3,  // 95: v1.UnpaperService.StripeConnectWebhook:output_type -> google.protobuf.Empty
	65, // 96: v1.UnpaperService.SubscribeToPlan:output_type -> v1.Customer
	66, // 97: v1.UnpaperService.RetryInvoice:output_type -> v1.Invoice
	67, // 98: v1.UnpaperService.GetSubscriptionByID:output_type -> v1.GetSubscriptionByIDResponse
	68, // 99: v1.UnpaperService.CreateSetupIntent:output_type -> v1.CreateSetupIntentResponse
	69, // 100: v1.UnpaperService.AttachPaymentMethod:output_type -> v1.PaymentMethod
	65, // 101: v1.UnpaperService.UpdateSubscription:output_type -> v1.Customer
	66, // 102: v1.UnpaperService.InvoicePreview:output_type -> v1.Invoice
	70, // 103: v1.UnpaperService.CouponCheck:output_type -> v1.CouponCheckResponse
	71, // 104: v1.UnpaperService.GetConnectAccountLink:output_type -> v1.GetConnectAccountLinkResponse
	72, // 105: v1.UnpaperService.MakeDonation:output_type -> v1.ConnectedPaymentIntentResponse
	72, // 106: v1.UnpaperService.PayRoomEntrance:output_type -> v1.ConnectedPaymentIntentResponse
	65, // 107: v1.UnpaperService.CreateStripeAccount:output_type -> v1.Customer
	73, // 108: v1.UnpaperService.GetDashboardLink:output_type -> v1.GetDashboardLinkResponse
	74, // 109: v1.UnpaperService.CheckRoomEntrancePI:output_type -> v1.CheckRoomEntrancePIResponse
	75, // 110: v1.UnpaperService.SubscribeToRoom:output_type -> v1.SubscribeToRoomResponse
	76, // 111: v1.UnpaperService.GetRoomSubscriptions:output_type -> v1.GetRoomSubscriptionsResponse
	77, // 112: v1.UnpaperService.ConfirmRoomSubscription:output_type -> v1.ConfirmRoomSubscriptionResponse
	72, // 113: v1.UnpaperService.RetryRoomSubscription:output_type -> v1.ConnectedPaymentIntentResponse
	78, // 114: v1.UnpaperService.GetRoomSubscriptionByRoomID:output_type -> v1.GetRoomSubscriptionByRoomIDResponse
	79, // 115: v1.UnpaperService.GetOwnConnectedAccount:output_type -> v1.GetOwnConnectedAccountResponse
	80, // 116: v1.UnpaperService.GetMessages:output_type -> v1.GetMessagesResponse
	81, // 117: v1.UnpaperService.ListenForMessages:output_type -> v1.ChatMessage
	3,  // 118: v1.UnpaperService.SendMessage:output_type -> google.protobuf.Empty
	3,  // 119: v1.UnpaperService.SendAward:output_type -> google.protobuf.Empty
	3,  // 120: v1.UnpaperService.SendDonation:output_type -> google.protobuf.Empty
	3,  // 121: v1.UnpaperService.SendAudio:output_type -> google.protobuf.Empty
	82, // 122: v1.UnpaperService.CreateList:output_type -> v1.List
	82, // 123: v1.UnpaperService.UpdateList:output_type -> v1.List
	83, // 124: v1.UnpaperService.GetUserSuggestions:output_type -> v1.GetUserSuggestionsResponse
	84, // 125: v1.UnpaperService.GetAllLists:output_type -> v1.GetAllListsResponse
	82, // 126: v1.UnpaperService.GetListByID:output_type -> v1.List
	85, // 127: v1.UnpaperService.RoomAccessCheck:output_type -> v1.RoomAccessCheckResponse
	86, // 128: v1.UnpaperService.CreateConversation:output_type -> v1.CreateConversationResponse
	87, // 129: v1.UnpaperService.GetConversation:output_type -> v1.GetConversationResponse
	88, // 130: v1.UnpaperService.GetConversations:output_type -> v1.GetConversationsResponse
	89, // 131: v1.UnpaperService.GetConversationWithParticipants:output_type -> v1.GetConversationWithParticipantsResponse
	90, // 132: v1.UnpaperService.ListenForNotifications:output_type -> v1.Notification
	91, // 133: v1.UnpaperService.GetAllNotifications:output_type -> v1.GetAllNotificationsRes
	92, // 134: v1.UnpaperService.ReadNotification:output_type -> v1.ReadNotificationResponse
	93, // 135: v1.UnpaperService.GetMixes:output_type -> v1.GetMixesRes
	94, // 136: v1.UnpaperService.CreatePost:output_type -> v1.CreatePostResponse
	95, // 137: v1.UnpaperService.GetPost:output_type -> v1.GetPostResponse
	96, // 138: v1.UnpaperService.GetPosts:output_type -> v1.GetPostsResponse
	97, // 139: v1.UnpaperService.CreateComment:output_type -> v1.CreateCommentResponse
	98, // 140: v1.UnpaperService.LikePost:output_type -> v1.LikePostResponse
	99, // 141: v1.UnpaperService.LikeComment:output_type -> v1.LikeCommentResponse
	71, // [71:142] is the sub-list for method output_type
	0,  // [0:71] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_proto_v1_unpaper_service_proto_init() }
func file_api_proto_v1_unpaper_service_proto_init() {
	if File_api_proto_v1_unpaper_service_proto != nil {
		return
	}
	file_api_proto_v1_payment_proto_init()
	file_api_proto_v1_auth_proto_init()
	file_api_proto_v1_chat_proto_init()
	file_api_proto_v1_posts_proto_init()
	file_api_proto_v1_notifications_proto_init()
	file_api_proto_v1_mixes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_v1_unpaper_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_v1_unpaper_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_v1_unpaper_service_proto_goTypes,
		DependencyIndexes: file_api_proto_v1_unpaper_service_proto_depIdxs,
		MessageInfos:      file_api_proto_v1_unpaper_service_proto_msgTypes,
	}.Build()
	File_api_proto_v1_unpaper_service_proto = out.File
	file_api_proto_v1_unpaper_service_proto_rawDesc = nil
	file_api_proto_v1_unpaper_service_proto_goTypes = nil
	file_api_proto_v1_unpaper_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UnpaperServiceClient is the client API for UnpaperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnpaperServiceClient interface {
	// Ping
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*User, error)
	// Auth
	GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*User, error)
	GoogleOneTap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error)
	EmailSignup(ctx context.Context, in *EmailSignupRequest, opts ...grpc.CallOption) (*User, error)
	EmailSignin(ctx context.Context, in *EmailSigninRequest, opts ...grpc.CallOption) (*User, error)
	EmailVerify(ctx context.Context, in *EmailVerifyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	EmailCheck(ctx context.Context, in *EmailCheckRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendResetLink(ctx context.Context, in *SendResetLinkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*User, error)
	SignOut(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SetUserOnline(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SetUserOffline(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*ExtUserInfoResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*GetFollowingResponse, error)
	GetFollowingCount(ctx context.Context, in *GetFollowingCountRequest, opts ...grpc.CallOption) (*GetFollowingCountResponse, error)
	GetFollowersCount(ctx context.Context, in *GetFollowersCountRequest, opts ...grpc.CallOption) (*GetFollowersCountResponse, error)
	// Info
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*User, error)
	ExtUserInfo(ctx context.Context, in *ExtUserInfoRequest, opts ...grpc.CallOption) (*ExtUserInfoResponse, error)
	CustomerInfo(ctx context.Context, in *CustomerInfoRequest, opts ...grpc.CallOption) (*Customer, error)
	// Stripe
	StripeWebhook(ctx context.Context, in *StripeWebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StripeConnectWebhook(ctx context.Context, in *StripeWebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubscribeToPlan(ctx context.Context, in *SubscribeToPlanRequest, opts ...grpc.CallOption) (*Customer, error)
	RetryInvoice(ctx context.Context, in *RetryInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error)
	GetSubscriptionByID(ctx context.Context, in *GetSubscriptionByIDRequest, opts ...grpc.CallOption) (*GetSubscriptionByIDResponse, error)
	CreateSetupIntent(ctx context.Context, in *CreateSetupIntentRequest, opts ...grpc.CallOption) (*CreateSetupIntentResponse, error)
	AttachPaymentMethod(ctx context.Context, in *AttachPaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethod, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*Customer, error)
	InvoicePreview(ctx context.Context, in *InvoicePreviewRequest, opts ...grpc.CallOption) (*Invoice, error)
	CouponCheck(ctx context.Context, in *CouponCheckRequest, opts ...grpc.CallOption) (*CouponCheckResponse, error)
	GetConnectAccountLink(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConnectAccountLinkResponse, error)
	MakeDonation(ctx context.Context, in *MakeDonationRequest, opts ...grpc.CallOption) (*ConnectedPaymentIntentResponse, error)
	PayRoomEntrance(ctx context.Context, in *PayRoomEntranceRequest, opts ...grpc.CallOption) (*ConnectedPaymentIntentResponse, error)
	CreateStripeAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Customer, error)
	GetDashboardLink(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDashboardLinkResponse, error)
	CheckRoomEntrancePI(ctx context.Context, in *CheckRoomEntrancePIRequest, opts ...grpc.CallOption) (*CheckRoomEntrancePIResponse, error)
	SubscribeToRoom(ctx context.Context, in *SubscribeToRoomRequest, opts ...grpc.CallOption) (*SubscribeToRoomResponse, error)
	GetRoomSubscriptions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetRoomSubscriptionsResponse, error)
	ConfirmRoomSubscription(ctx context.Context, in *ConfirmRoomSubscriptionRequest, opts ...grpc.CallOption) (*ConfirmRoomSubscriptionResponse, error)
	RetryRoomSubscription(ctx context.Context, in *RetryRoomSubscriptionRequest, opts ...grpc.CallOption) (*ConnectedPaymentIntentResponse, error)
	GetRoomSubscriptionByRoomID(ctx context.Context, in *GetRoomSubscriptionByRoomIDRequest, opts ...grpc.CallOption) (*GetRoomSubscriptionByRoomIDResponse, error)
	GetOwnConnectedAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOwnConnectedAccountResponse, error)
	// Chat
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	ListenForMessages(ctx context.Context, in *ListenForMessagesRequest, opts ...grpc.CallOption) (UnpaperService_ListenForMessagesClient, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendAward(ctx context.Context, in *SendAwardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendDonation(ctx context.Context, in *SendDonationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendAudio(ctx context.Context, in *SendAudioRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*List, error)
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*List, error)
	GetUserSuggestions(ctx context.Context, in *GetUserSuggestionsRequest, opts ...grpc.CallOption) (*GetUserSuggestionsResponse, error)
	GetAllLists(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllListsResponse, error)
	GetListByID(ctx context.Context, in *GetListByIDRequest, opts ...grpc.CallOption) (*List, error)
	RoomAccessCheck(ctx context.Context, in *RoomAccessCheckRequest, opts ...grpc.CallOption) (*RoomAccessCheckResponse, error)
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error)
	GetConversationWithParticipants(ctx context.Context, in *GetConversationWithParticipantsRequest, opts ...grpc.CallOption) (*GetConversationWithParticipantsResponse, error)
	// Notifications
	ListenForNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UnpaperService_ListenForNotificationsClient, error)
	GetAllNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllNotificationsRes, error)
	ReadNotification(ctx context.Context, in *ReadNotificationRequest, opts ...grpc.CallOption) (*ReadNotificationResponse, error)
	// Mixes
	GetMixes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMixesRes, error)
	// Posts
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error)
}

type unpaperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnpaperServiceClient(cc grpc.ClientConnInterface) UnpaperServiceClient {
	return &unpaperServiceClient{cc}
}

func (c *unpaperServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GoogleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GoogleCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GoogleOneTap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GoogleOneTap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) EmailSignup(ctx context.Context, in *EmailSignupRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/EmailSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) EmailSignin(ctx context.Context, in *EmailSigninRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/EmailSignin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) EmailVerify(ctx context.Context, in *EmailVerifyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/EmailVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) EmailCheck(ctx context.Context, in *EmailCheckRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/EmailCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SendResetLink(ctx context.Context, in *SendResetLinkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SendResetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/UpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SignOut(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SetUserOnline(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SetUserOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SetUserOffline(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SetUserOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*ExtUserInfoResponse, error) {
	out := new(ExtUserInfoResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*GetFollowingResponse, error) {
	out := new(GetFollowingResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetFollowingCount(ctx context.Context, in *GetFollowingCountRequest, opts ...grpc.CallOption) (*GetFollowingCountResponse, error) {
	out := new(GetFollowingCountResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetFollowingCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetFollowersCount(ctx context.Context, in *GetFollowersCountRequest, opts ...grpc.CallOption) (*GetFollowersCountResponse, error) {
	out := new(GetFollowersCountResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetFollowersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ExtUserInfo(ctx context.Context, in *ExtUserInfoRequest, opts ...grpc.CallOption) (*ExtUserInfoResponse, error) {
	out := new(ExtUserInfoResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/ExtUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CustomerInfo(ctx context.Context, in *CustomerInfoRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CustomerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) StripeWebhook(ctx context.Context, in *StripeWebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/StripeWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) StripeConnectWebhook(ctx context.Context, in *StripeWebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/StripeConnectWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SubscribeToPlan(ctx context.Context, in *SubscribeToPlanRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SubscribeToPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) RetryInvoice(ctx context.Context, in *RetryInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/RetryInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetSubscriptionByID(ctx context.Context, in *GetSubscriptionByIDRequest, opts ...grpc.CallOption) (*GetSubscriptionByIDResponse, error) {
	out := new(GetSubscriptionByIDResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetSubscriptionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CreateSetupIntent(ctx context.Context, in *CreateSetupIntentRequest, opts ...grpc.CallOption) (*CreateSetupIntentResponse, error) {
	out := new(CreateSetupIntentResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CreateSetupIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) AttachPaymentMethod(ctx context.Context, in *AttachPaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/AttachPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) InvoicePreview(ctx context.Context, in *InvoicePreviewRequest, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/InvoicePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CouponCheck(ctx context.Context, in *CouponCheckRequest, opts ...grpc.CallOption) (*CouponCheckResponse, error) {
	out := new(CouponCheckResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CouponCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetConnectAccountLink(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConnectAccountLinkResponse, error) {
	out := new(GetConnectAccountLinkResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetConnectAccountLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) MakeDonation(ctx context.Context, in *MakeDonationRequest, opts ...grpc.CallOption) (*ConnectedPaymentIntentResponse, error) {
	out := new(ConnectedPaymentIntentResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/MakeDonation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) PayRoomEntrance(ctx context.Context, in *PayRoomEntranceRequest, opts ...grpc.CallOption) (*ConnectedPaymentIntentResponse, error) {
	out := new(ConnectedPaymentIntentResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/PayRoomEntrance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CreateStripeAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CreateStripeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetDashboardLink(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDashboardLinkResponse, error) {
	out := new(GetDashboardLinkResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetDashboardLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CheckRoomEntrancePI(ctx context.Context, in *CheckRoomEntrancePIRequest, opts ...grpc.CallOption) (*CheckRoomEntrancePIResponse, error) {
	out := new(CheckRoomEntrancePIResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CheckRoomEntrancePI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SubscribeToRoom(ctx context.Context, in *SubscribeToRoomRequest, opts ...grpc.CallOption) (*SubscribeToRoomResponse, error) {
	out := new(SubscribeToRoomResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SubscribeToRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetRoomSubscriptions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetRoomSubscriptionsResponse, error) {
	out := new(GetRoomSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetRoomSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ConfirmRoomSubscription(ctx context.Context, in *ConfirmRoomSubscriptionRequest, opts ...grpc.CallOption) (*ConfirmRoomSubscriptionResponse, error) {
	out := new(ConfirmRoomSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/ConfirmRoomSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) RetryRoomSubscription(ctx context.Context, in *RetryRoomSubscriptionRequest, opts ...grpc.CallOption) (*ConnectedPaymentIntentResponse, error) {
	out := new(ConnectedPaymentIntentResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/RetryRoomSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetRoomSubscriptionByRoomID(ctx context.Context, in *GetRoomSubscriptionByRoomIDRequest, opts ...grpc.CallOption) (*GetRoomSubscriptionByRoomIDResponse, error) {
	out := new(GetRoomSubscriptionByRoomIDResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetRoomSubscriptionByRoomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetOwnConnectedAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOwnConnectedAccountResponse, error) {
	out := new(GetOwnConnectedAccountResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetOwnConnectedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ListenForMessages(ctx context.Context, in *ListenForMessagesRequest, opts ...grpc.CallOption) (UnpaperService_ListenForMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UnpaperService_serviceDesc.Streams[0], "/v1.UnpaperService/ListenForMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &unpaperServiceListenForMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnpaperService_ListenForMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type unpaperServiceListenForMessagesClient struct {
	grpc.ClientStream
}

func (x *unpaperServiceListenForMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unpaperServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SendAward(ctx context.Context, in *SendAwardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SendAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SendDonation(ctx context.Context, in *SendDonationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SendDonation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) SendAudio(ctx context.Context, in *SendAudioRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/SendAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CreateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/UpdateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetUserSuggestions(ctx context.Context, in *GetUserSuggestionsRequest, opts ...grpc.CallOption) (*GetUserSuggestionsResponse, error) {
	out := new(GetUserSuggestionsResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetUserSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetAllLists(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllListsResponse, error) {
	out := new(GetAllListsResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetAllLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetListByID(ctx context.Context, in *GetListByIDRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetListByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) RoomAccessCheck(ctx context.Context, in *RoomAccessCheckRequest, opts ...grpc.CallOption) (*RoomAccessCheckResponse, error) {
	out := new(RoomAccessCheckResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/RoomAccessCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error) {
	out := new(GetConversationsResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetConversationWithParticipants(ctx context.Context, in *GetConversationWithParticipantsRequest, opts ...grpc.CallOption) (*GetConversationWithParticipantsResponse, error) {
	out := new(GetConversationWithParticipantsResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetConversationWithParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ListenForNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UnpaperService_ListenForNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UnpaperService_serviceDesc.Streams[1], "/v1.UnpaperService/ListenForNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &unpaperServiceListenForNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnpaperService_ListenForNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type unpaperServiceListenForNotificationsClient struct {
	grpc.ClientStream
}

func (x *unpaperServiceListenForNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unpaperServiceClient) GetAllNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllNotificationsRes, error) {
	out := new(GetAllNotificationsRes)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetAllNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) ReadNotification(ctx context.Context, in *ReadNotificationRequest, opts ...grpc.CallOption) (*ReadNotificationResponse, error) {
	out := new(ReadNotificationResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/ReadNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetMixes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMixesRes, error) {
	out := new(GetMixesRes)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetMixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error) {
	out := new(GetPostsResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/LikePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unpaperServiceClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error) {
	out := new(LikeCommentResponse)
	err := c.cc.Invoke(ctx, "/v1.UnpaperService/LikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnpaperServiceServer is the server API for UnpaperService service.
type UnpaperServiceServer interface {
	// Ping
	Ping(context.Context, *PingRequest) (*User, error)
	// Auth
	GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error)
	GoogleCallback(context.Context, *GoogleCallbackRequest) (*User, error)
	GoogleOneTap(context.Context, *empty.Empty) (*User, error)
	EmailSignup(context.Context, *EmailSignupRequest) (*User, error)
	EmailSignin(context.Context, *EmailSigninRequest) (*User, error)
	EmailVerify(context.Context, *EmailVerifyRequest) (*empty.Empty, error)
	EmailCheck(context.Context, *EmailCheckRequest) (*empty.Empty, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error)
	SendResetLink(context.Context, *SendResetLinkRequest) (*empty.Empty, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*empty.Empty, error)
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*User, error)
	SignOut(context.Context, *empty.Empty) (*empty.Empty, error)
	SetUserOnline(context.Context, *empty.Empty) (*empty.Empty, error)
	SetUserOffline(context.Context, *empty.Empty) (*empty.Empty, error)
	FollowUser(context.Context, *FollowUserRequest) (*ExtUserInfoResponse, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetFollowing(context.Context, *GetFollowingRequest) (*GetFollowingResponse, error)
	GetFollowingCount(context.Context, *GetFollowingCountRequest) (*GetFollowingCountResponse, error)
	GetFollowersCount(context.Context, *GetFollowersCountRequest) (*GetFollowersCountResponse, error)
	// Info
	UserInfo(context.Context, *UserInfoRequest) (*User, error)
	ExtUserInfo(context.Context, *ExtUserInfoRequest) (*ExtUserInfoResponse, error)
	CustomerInfo(context.Context, *CustomerInfoRequest) (*Customer, error)
	// Stripe
	StripeWebhook(context.Context, *StripeWebhookRequest) (*empty.Empty, error)
	StripeConnectWebhook(context.Context, *StripeWebhookRequest) (*empty.Empty, error)
	SubscribeToPlan(context.Context, *SubscribeToPlanRequest) (*Customer, error)
	RetryInvoice(context.Context, *RetryInvoiceRequest) (*Invoice, error)
	GetSubscriptionByID(context.Context, *GetSubscriptionByIDRequest) (*GetSubscriptionByIDResponse, error)
	CreateSetupIntent(context.Context, *CreateSetupIntentRequest) (*CreateSetupIntentResponse, error)
	AttachPaymentMethod(context.Context, *AttachPaymentMethodRequest) (*PaymentMethod, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*Customer, error)
	InvoicePreview(context.Context, *InvoicePreviewRequest) (*Invoice, error)
	CouponCheck(context.Context, *CouponCheckRequest) (*CouponCheckResponse, error)
	GetConnectAccountLink(context.Context, *empty.Empty) (*GetConnectAccountLinkResponse, error)
	MakeDonation(context.Context, *MakeDonationRequest) (*ConnectedPaymentIntentResponse, error)
	PayRoomEntrance(context.Context, *PayRoomEntranceRequest) (*ConnectedPaymentIntentResponse, error)
	CreateStripeAccount(context.Context, *empty.Empty) (*Customer, error)
	GetDashboardLink(context.Context, *empty.Empty) (*GetDashboardLinkResponse, error)
	CheckRoomEntrancePI(context.Context, *CheckRoomEntrancePIRequest) (*CheckRoomEntrancePIResponse, error)
	SubscribeToRoom(context.Context, *SubscribeToRoomRequest) (*SubscribeToRoomResponse, error)
	GetRoomSubscriptions(context.Context, *empty.Empty) (*GetRoomSubscriptionsResponse, error)
	ConfirmRoomSubscription(context.Context, *ConfirmRoomSubscriptionRequest) (*ConfirmRoomSubscriptionResponse, error)
	RetryRoomSubscription(context.Context, *RetryRoomSubscriptionRequest) (*ConnectedPaymentIntentResponse, error)
	GetRoomSubscriptionByRoomID(context.Context, *GetRoomSubscriptionByRoomIDRequest) (*GetRoomSubscriptionByRoomIDResponse, error)
	GetOwnConnectedAccount(context.Context, *empty.Empty) (*GetOwnConnectedAccountResponse, error)
	// Chat
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	ListenForMessages(*ListenForMessagesRequest, UnpaperService_ListenForMessagesServer) error
	SendMessage(context.Context, *SendMessageRequest) (*empty.Empty, error)
	SendAward(context.Context, *SendAwardRequest) (*empty.Empty, error)
	SendDonation(context.Context, *SendDonationRequest) (*empty.Empty, error)
	SendAudio(context.Context, *SendAudioRequest) (*empty.Empty, error)
	CreateList(context.Context, *CreateListRequest) (*List, error)
	UpdateList(context.Context, *UpdateListRequest) (*List, error)
	GetUserSuggestions(context.Context, *GetUserSuggestionsRequest) (*GetUserSuggestionsResponse, error)
	GetAllLists(context.Context, *empty.Empty) (*GetAllListsResponse, error)
	GetListByID(context.Context, *GetListByIDRequest) (*List, error)
	RoomAccessCheck(context.Context, *RoomAccessCheckRequest) (*RoomAccessCheckResponse, error)
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error)
	GetConversationWithParticipants(context.Context, *GetConversationWithParticipantsRequest) (*GetConversationWithParticipantsResponse, error)
	// Notifications
	ListenForNotifications(*empty.Empty, UnpaperService_ListenForNotificationsServer) error
	GetAllNotifications(context.Context, *empty.Empty) (*GetAllNotificationsRes, error)
	ReadNotification(context.Context, *ReadNotificationRequest) (*ReadNotificationResponse, error)
	// Mixes
	GetMixes(context.Context, *empty.Empty) (*GetMixesRes, error)
	// Posts
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	GetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error)
}

// UnimplementedUnpaperServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUnpaperServiceServer struct {
}

func (*UnimplementedUnpaperServiceServer) Ping(context.Context, *PingRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedUnpaperServiceServer) GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (*UnimplementedUnpaperServiceServer) GoogleCallback(context.Context, *GoogleCallbackRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleCallback not implemented")
}
func (*UnimplementedUnpaperServiceServer) GoogleOneTap(context.Context, *empty.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleOneTap not implemented")
}
func (*UnimplementedUnpaperServiceServer) EmailSignup(context.Context, *EmailSignupRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailSignup not implemented")
}
func (*UnimplementedUnpaperServiceServer) EmailSignin(context.Context, *EmailSigninRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailSignin not implemented")
}
func (*UnimplementedUnpaperServiceServer) EmailVerify(context.Context, *EmailVerifyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailVerify not implemented")
}
func (*UnimplementedUnpaperServiceServer) EmailCheck(context.Context, *EmailCheckRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailCheck not implemented")
}
func (*UnimplementedUnpaperServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedUnpaperServiceServer) SendResetLink(context.Context, *SendResetLinkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetLink not implemented")
}
func (*UnimplementedUnpaperServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedUnpaperServiceServer) UpdateUsername(context.Context, *UpdateUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}
func (*UnimplementedUnpaperServiceServer) SignOut(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (*UnimplementedUnpaperServiceServer) SetUserOnline(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserOnline not implemented")
}
func (*UnimplementedUnpaperServiceServer) SetUserOffline(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserOffline not implemented")
}
func (*UnimplementedUnpaperServiceServer) FollowUser(context.Context, *FollowUserRequest) (*ExtUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetFollowing(context.Context, *GetFollowingRequest) (*GetFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetFollowingCount(context.Context, *GetFollowingCountRequest) (*GetFollowingCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingCount not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetFollowersCount(context.Context, *GetFollowersCountRequest) (*GetFollowersCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersCount not implemented")
}
func (*UnimplementedUnpaperServiceServer) UserInfo(context.Context, *UserInfoRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (*UnimplementedUnpaperServiceServer) ExtUserInfo(context.Context, *ExtUserInfoRequest) (*ExtUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtUserInfo not implemented")
}
func (*UnimplementedUnpaperServiceServer) CustomerInfo(context.Context, *CustomerInfoRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerInfo not implemented")
}
func (*UnimplementedUnpaperServiceServer) StripeWebhook(context.Context, *StripeWebhookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StripeWebhook not implemented")
}
func (*UnimplementedUnpaperServiceServer) StripeConnectWebhook(context.Context, *StripeWebhookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StripeConnectWebhook not implemented")
}
func (*UnimplementedUnpaperServiceServer) SubscribeToPlan(context.Context, *SubscribeToPlanRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToPlan not implemented")
}
func (*UnimplementedUnpaperServiceServer) RetryInvoice(context.Context, *RetryInvoiceRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryInvoice not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetSubscriptionByID(context.Context, *GetSubscriptionByIDRequest) (*GetSubscriptionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionByID not implemented")
}
func (*UnimplementedUnpaperServiceServer) CreateSetupIntent(context.Context, *CreateSetupIntentRequest) (*CreateSetupIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetupIntent not implemented")
}
func (*UnimplementedUnpaperServiceServer) AttachPaymentMethod(context.Context, *AttachPaymentMethodRequest) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachPaymentMethod not implemented")
}
func (*UnimplementedUnpaperServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (*UnimplementedUnpaperServiceServer) InvoicePreview(context.Context, *InvoicePreviewRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoicePreview not implemented")
}
func (*UnimplementedUnpaperServiceServer) CouponCheck(context.Context, *CouponCheckRequest) (*CouponCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponCheck not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetConnectAccountLink(context.Context, *empty.Empty) (*GetConnectAccountLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectAccountLink not implemented")
}
func (*UnimplementedUnpaperServiceServer) MakeDonation(context.Context, *MakeDonationRequest) (*ConnectedPaymentIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDonation not implemented")
}
func (*UnimplementedUnpaperServiceServer) PayRoomEntrance(context.Context, *PayRoomEntranceRequest) (*ConnectedPaymentIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRoomEntrance not implemented")
}
func (*UnimplementedUnpaperServiceServer) CreateStripeAccount(context.Context, *empty.Empty) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStripeAccount not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetDashboardLink(context.Context, *empty.Empty) (*GetDashboardLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardLink not implemented")
}
func (*UnimplementedUnpaperServiceServer) CheckRoomEntrancePI(context.Context, *CheckRoomEntrancePIRequest) (*CheckRoomEntrancePIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRoomEntrancePI not implemented")
}
func (*UnimplementedUnpaperServiceServer) SubscribeToRoom(context.Context, *SubscribeToRoomRequest) (*SubscribeToRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToRoom not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetRoomSubscriptions(context.Context, *empty.Empty) (*GetRoomSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomSubscriptions not implemented")
}
func (*UnimplementedUnpaperServiceServer) ConfirmRoomSubscription(context.Context, *ConfirmRoomSubscriptionRequest) (*ConfirmRoomSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRoomSubscription not implemented")
}
func (*UnimplementedUnpaperServiceServer) RetryRoomSubscription(context.Context, *RetryRoomSubscriptionRequest) (*ConnectedPaymentIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryRoomSubscription not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetRoomSubscriptionByRoomID(context.Context, *GetRoomSubscriptionByRoomIDRequest) (*GetRoomSubscriptionByRoomIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomSubscriptionByRoomID not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetOwnConnectedAccount(context.Context, *empty.Empty) (*GetOwnConnectedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnConnectedAccount not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (*UnimplementedUnpaperServiceServer) ListenForMessages(*ListenForMessagesRequest, UnpaperService_ListenForMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForMessages not implemented")
}
func (*UnimplementedUnpaperServiceServer) SendMessage(context.Context, *SendMessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedUnpaperServiceServer) SendAward(context.Context, *SendAwardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAward not implemented")
}
func (*UnimplementedUnpaperServiceServer) SendDonation(context.Context, *SendDonationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDonation not implemented")
}
func (*UnimplementedUnpaperServiceServer) SendAudio(context.Context, *SendAudioRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAudio not implemented")
}
func (*UnimplementedUnpaperServiceServer) CreateList(context.Context, *CreateListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (*UnimplementedUnpaperServiceServer) UpdateList(context.Context, *UpdateListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetUserSuggestions(context.Context, *GetUserSuggestionsRequest) (*GetUserSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSuggestions not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetAllLists(context.Context, *empty.Empty) (*GetAllListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLists not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetListByID(context.Context, *GetListByIDRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByID not implemented")
}
func (*UnimplementedUnpaperServiceServer) RoomAccessCheck(context.Context, *RoomAccessCheckRequest) (*RoomAccessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAccessCheck not implemented")
}
func (*UnimplementedUnpaperServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetConversationWithParticipants(context.Context, *GetConversationWithParticipantsRequest) (*GetConversationWithParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationWithParticipants not implemented")
}
func (*UnimplementedUnpaperServiceServer) ListenForNotifications(*empty.Empty, UnpaperService_ListenForNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForNotifications not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetAllNotifications(context.Context, *empty.Empty) (*GetAllNotificationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotifications not implemented")
}
func (*UnimplementedUnpaperServiceServer) ReadNotification(context.Context, *ReadNotificationRequest) (*ReadNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotification not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetMixes(context.Context, *empty.Empty) (*GetMixesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMixes not implemented")
}
func (*UnimplementedUnpaperServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (*UnimplementedUnpaperServiceServer) GetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (*UnimplementedUnpaperServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedUnpaperServiceServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (*UnimplementedUnpaperServiceServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}

func RegisterUnpaperServiceServer(s *grpc.Server, srv UnpaperServiceServer) {
	s.RegisterService(&_UnpaperService_serviceDesc, srv)
}

func _UnpaperService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GoogleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GoogleLogin(ctx, req.(*GoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GoogleCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GoogleCallback(ctx, req.(*GoogleCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GoogleOneTap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GoogleOneTap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GoogleOneTap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GoogleOneTap(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_EmailSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).EmailSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/EmailSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).EmailSignup(ctx, req.(*EmailSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_EmailSignin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).EmailSignin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/EmailSignin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).EmailSignin(ctx, req.(*EmailSigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_EmailVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).EmailVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/EmailVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).EmailVerify(ctx, req.(*EmailVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_EmailCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).EmailCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/EmailCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).EmailCheck(ctx, req.(*EmailCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SendResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SendResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SendResetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SendResetLink(ctx, req.(*SendResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SignOut(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SetUserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SetUserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SetUserOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SetUserOnline(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SetUserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SetUserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SetUserOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SetUserOffline(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetFollowing(ctx, req.(*GetFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetFollowingCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetFollowingCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetFollowingCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetFollowingCount(ctx, req.(*GetFollowingCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetFollowersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetFollowersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetFollowersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetFollowersCount(ctx, req.(*GetFollowersCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ExtUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).ExtUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/ExtUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).ExtUserInfo(ctx, req.(*ExtUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CustomerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CustomerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CustomerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CustomerInfo(ctx, req.(*CustomerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_StripeWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).StripeWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/StripeWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).StripeWebhook(ctx, req.(*StripeWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_StripeConnectWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).StripeConnectWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/StripeConnectWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).StripeConnectWebhook(ctx, req.(*StripeWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SubscribeToPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SubscribeToPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SubscribeToPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SubscribeToPlan(ctx, req.(*SubscribeToPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_RetryInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).RetryInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/RetryInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).RetryInvoice(ctx, req.(*RetryInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetSubscriptionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetSubscriptionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetSubscriptionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetSubscriptionByID(ctx, req.(*GetSubscriptionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CreateSetupIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSetupIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CreateSetupIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CreateSetupIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CreateSetupIntent(ctx, req.(*CreateSetupIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_AttachPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).AttachPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/AttachPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).AttachPaymentMethod(ctx, req.(*AttachPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_InvoicePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicePreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).InvoicePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/InvoicePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).InvoicePreview(ctx, req.(*InvoicePreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CouponCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CouponCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CouponCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CouponCheck(ctx, req.(*CouponCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetConnectAccountLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetConnectAccountLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetConnectAccountLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetConnectAccountLink(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_MakeDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).MakeDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/MakeDonation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).MakeDonation(ctx, req.(*MakeDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_PayRoomEntrance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRoomEntranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).PayRoomEntrance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/PayRoomEntrance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).PayRoomEntrance(ctx, req.(*PayRoomEntranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CreateStripeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CreateStripeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CreateStripeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CreateStripeAccount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetDashboardLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetDashboardLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetDashboardLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetDashboardLink(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CheckRoomEntrancePI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoomEntrancePIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CheckRoomEntrancePI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CheckRoomEntrancePI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CheckRoomEntrancePI(ctx, req.(*CheckRoomEntrancePIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SubscribeToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SubscribeToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SubscribeToRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SubscribeToRoom(ctx, req.(*SubscribeToRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetRoomSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetRoomSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetRoomSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetRoomSubscriptions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ConfirmRoomSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRoomSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).ConfirmRoomSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/ConfirmRoomSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).ConfirmRoomSubscription(ctx, req.(*ConfirmRoomSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_RetryRoomSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRoomSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).RetryRoomSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/RetryRoomSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).RetryRoomSubscription(ctx, req.(*RetryRoomSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetRoomSubscriptionByRoomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomSubscriptionByRoomIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetRoomSubscriptionByRoomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetRoomSubscriptionByRoomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetRoomSubscriptionByRoomID(ctx, req.(*GetRoomSubscriptionByRoomIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetOwnConnectedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetOwnConnectedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetOwnConnectedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetOwnConnectedAccount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ListenForMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenForMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnpaperServiceServer).ListenForMessages(m, &unpaperServiceListenForMessagesServer{stream})
}

type UnpaperService_ListenForMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type unpaperServiceListenForMessagesServer struct {
	grpc.ServerStream
}

func (x *unpaperServiceListenForMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _UnpaperService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SendAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SendAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SendAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SendAward(ctx, req.(*SendAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SendDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SendDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SendDonation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SendDonation(ctx, req.(*SendDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_SendAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).SendAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/SendAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).SendAudio(ctx, req.(*SendAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CreateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/UpdateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetUserSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetUserSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetUserSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetUserSuggestions(ctx, req.(*GetUserSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetAllLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetAllLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetAllLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetAllLists(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetListByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetListByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetListByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetListByID(ctx, req.(*GetListByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_RoomAccessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAccessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).RoomAccessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/RoomAccessCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).RoomAccessCheck(ctx, req.(*RoomAccessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetConversations(ctx, req.(*GetConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetConversationWithParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationWithParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetConversationWithParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetConversationWithParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetConversationWithParticipants(ctx, req.(*GetConversationWithParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ListenForNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnpaperServiceServer).ListenForNotifications(m, &unpaperServiceListenForNotificationsServer{stream})
}

type UnpaperService_ListenForNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type unpaperServiceListenForNotificationsServer struct {
	grpc.ServerStream
}

func (x *unpaperServiceListenForNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _UnpaperService_GetAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetAllNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetAllNotifications(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_ReadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).ReadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/ReadNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).ReadNotification(ctx, req.(*ReadNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetMixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetMixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetMixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetMixes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).GetPosts(ctx, req.(*GetPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/LikePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnpaperService_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnpaperServiceServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UnpaperService/LikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnpaperServiceServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnpaperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UnpaperService",
	HandlerType: (*UnpaperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UnpaperService_Ping_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _UnpaperService_GoogleLogin_Handler,
		},
		{
			MethodName: "GoogleCallback",
			Handler:    _UnpaperService_GoogleCallback_Handler,
		},
		{
			MethodName: "GoogleOneTap",
			Handler:    _UnpaperService_GoogleOneTap_Handler,
		},
		{
			MethodName: "EmailSignup",
			Handler:    _UnpaperService_EmailSignup_Handler,
		},
		{
			MethodName: "EmailSignin",
			Handler:    _UnpaperService_EmailSignin_Handler,
		},
		{
			MethodName: "EmailVerify",
			Handler:    _UnpaperService_EmailVerify_Handler,
		},
		{
			MethodName: "EmailCheck",
			Handler:    _UnpaperService_EmailCheck_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UnpaperService_ChangePassword_Handler,
		},
		{
			MethodName: "SendResetLink",
			Handler:    _UnpaperService_SendResetLink_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UnpaperService_ResetPassword_Handler,
		},
		{
			MethodName: "UpdateUsername",
			Handler:    _UnpaperService_UpdateUsername_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _UnpaperService_SignOut_Handler,
		},
		{
			MethodName: "SetUserOnline",
			Handler:    _UnpaperService_SetUserOnline_Handler,
		},
		{
			MethodName: "SetUserOffline",
			Handler:    _UnpaperService_SetUserOffline_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _UnpaperService_FollowUser_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _UnpaperService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _UnpaperService_GetFollowing_Handler,
		},
		{
			MethodName: "GetFollowingCount",
			Handler:    _UnpaperService_GetFollowingCount_Handler,
		},
		{
			MethodName: "GetFollowersCount",
			Handler:    _UnpaperService_GetFollowersCount_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _UnpaperService_UserInfo_Handler,
		},
		{
			MethodName: "ExtUserInfo",
			Handler:    _UnpaperService_ExtUserInfo_Handler,
		},
		{
			MethodName: "CustomerInfo",
			Handler:    _UnpaperService_CustomerInfo_Handler,
		},
		{
			MethodName: "StripeWebhook",
			Handler:    _UnpaperService_StripeWebhook_Handler,
		},
		{
			MethodName: "StripeConnectWebhook",
			Handler:    _UnpaperService_StripeConnectWebhook_Handler,
		},
		{
			MethodName: "SubscribeToPlan",
			Handler:    _UnpaperService_SubscribeToPlan_Handler,
		},
		{
			MethodName: "RetryInvoice",
			Handler:    _UnpaperService_RetryInvoice_Handler,
		},
		{
			MethodName: "GetSubscriptionByID",
			Handler:    _UnpaperService_GetSubscriptionByID_Handler,
		},
		{
			MethodName: "CreateSetupIntent",
			Handler:    _UnpaperService_CreateSetupIntent_Handler,
		},
		{
			MethodName: "AttachPaymentMethod",
			Handler:    _UnpaperService_AttachPaymentMethod_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _UnpaperService_UpdateSubscription_Handler,
		},
		{
			MethodName: "InvoicePreview",
			Handler:    _UnpaperService_InvoicePreview_Handler,
		},
		{
			MethodName: "CouponCheck",
			Handler:    _UnpaperService_CouponCheck_Handler,
		},
		{
			MethodName: "GetConnectAccountLink",
			Handler:    _UnpaperService_GetConnectAccountLink_Handler,
		},
		{
			MethodName: "MakeDonation",
			Handler:    _UnpaperService_MakeDonation_Handler,
		},
		{
			MethodName: "PayRoomEntrance",
			Handler:    _UnpaperService_PayRoomEntrance_Handler,
		},
		{
			MethodName: "CreateStripeAccount",
			Handler:    _UnpaperService_CreateStripeAccount_Handler,
		},
		{
			MethodName: "GetDashboardLink",
			Handler:    _UnpaperService_GetDashboardLink_Handler,
		},
		{
			MethodName: "CheckRoomEntrancePI",
			Handler:    _UnpaperService_CheckRoomEntrancePI_Handler,
		},
		{
			MethodName: "SubscribeToRoom",
			Handler:    _UnpaperService_SubscribeToRoom_Handler,
		},
		{
			MethodName: "GetRoomSubscriptions",
			Handler:    _UnpaperService_GetRoomSubscriptions_Handler,
		},
		{
			MethodName: "ConfirmRoomSubscription",
			Handler:    _UnpaperService_ConfirmRoomSubscription_Handler,
		},
		{
			MethodName: "RetryRoomSubscription",
			Handler:    _UnpaperService_RetryRoomSubscription_Handler,
		},
		{
			MethodName: "GetRoomSubscriptionByRoomID",
			Handler:    _UnpaperService_GetRoomSubscriptionByRoomID_Handler,
		},
		{
			MethodName: "GetOwnConnectedAccount",
			Handler:    _UnpaperService_GetOwnConnectedAccount_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _UnpaperService_GetMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _UnpaperService_SendMessage_Handler,
		},
		{
			MethodName: "SendAward",
			Handler:    _UnpaperService_SendAward_Handler,
		},
		{
			MethodName: "SendDonation",
			Handler:    _UnpaperService_SendDonation_Handler,
		},
		{
			MethodName: "SendAudio",
			Handler:    _UnpaperService_SendAudio_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _UnpaperService_CreateList_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _UnpaperService_UpdateList_Handler,
		},
		{
			MethodName: "GetUserSuggestions",
			Handler:    _UnpaperService_GetUserSuggestions_Handler,
		},
		{
			MethodName: "GetAllLists",
			Handler:    _UnpaperService_GetAllLists_Handler,
		},
		{
			MethodName: "GetListByID",
			Handler:    _UnpaperService_GetListByID_Handler,
		},
		{
			MethodName: "RoomAccessCheck",
			Handler:    _UnpaperService_RoomAccessCheck_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _UnpaperService_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _UnpaperService_GetConversation_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _UnpaperService_GetConversations_Handler,
		},
		{
			MethodName: "GetConversationWithParticipants",
			Handler:    _UnpaperService_GetConversationWithParticipants_Handler,
		},
		{
			MethodName: "GetAllNotifications",
			Handler:    _UnpaperService_GetAllNotifications_Handler,
		},
		{
			MethodName: "ReadNotification",
			Handler:    _UnpaperService_ReadNotification_Handler,
		},
		{
			MethodName: "GetMixes",
			Handler:    _UnpaperService_GetMixes_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _UnpaperService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _UnpaperService_GetPost_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _UnpaperService_GetPosts_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _UnpaperService_CreateComment_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _UnpaperService_LikePost_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _UnpaperService_LikeComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForMessages",
			Handler:       _UnpaperService_ListenForMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenForNotifications",
			Handler:       _UnpaperService_ListenForNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/v1/unpaper-service.proto",
}
