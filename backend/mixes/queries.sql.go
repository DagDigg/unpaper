// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package mixes

import (
	"context"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const createUserMix = `-- name: CreateUserMix :one
INSERT INTO mixes (id, user_id, post_ids, background, requested_at, category, title)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, category, post_ids, background, requested_at, title
`

type CreateUserMixParams struct {
	ID          string
	UserID      string
	PostIds     []string
	Background  json.RawMessage
	RequestedAt time.Time
	Category    string
	Title       string
}

func (q *Queries) CreateUserMix(ctx context.Context, arg CreateUserMixParams) (Mix, error) {
	row := q.db.QueryRowContext(ctx, createUserMix,
		arg.ID,
		arg.UserID,
		pq.Array(arg.PostIds),
		arg.Background,
		arg.RequestedAt,
		arg.Category,
		arg.Title,
	)
	var i Mix
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Category,
		pq.Array(&i.PostIds),
		&i.Background,
		&i.RequestedAt,
		&i.Title,
	)
	return i, err
}

const deleteUserMixes = `-- name: DeleteUserMixes :exec
DELETE FROM mixes WHERE user_id = $1
`

func (q *Queries) DeleteUserMixes(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserMixes, userID)
	return err
}

const getUserMixes = `-- name: GetUserMixes :many
SELECT id, user_id, category, post_ids, background, requested_at, title FROM mixes WHERE user_id=$1
`

func (q *Queries) GetUserMixes(ctx context.Context, userID string) ([]Mix, error) {
	rows, err := q.db.QueryContext(ctx, getUserMixes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mix
	for rows.Next() {
		var i Mix
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Category,
			pq.Array(&i.PostIds),
			&i.Background,
			&i.RequestedAt,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
