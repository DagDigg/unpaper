// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package users

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, given_name, family_name, email, password, username)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING email_verified, password_changed_at, email, password, id, family_name, type, given_name, username
`

type CreateUserParams struct {
	ID         string
	GivenName  sql.NullString
	FamilyName sql.NullString
	Email      string
	Password   sql.NullString
	Username   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.GivenName,
		arg.FamilyName,
		arg.Email,
		arg.Password,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.Email,
		&i.Password,
		&i.ID,
		&i.FamilyName,
		&i.Type,
		&i.GivenName,
		&i.Username,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const emailExists = `-- name: EmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE (LOWER(email)) = $1)
`

func (q *Queries) EmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, emailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getEmail = `-- name: GetEmail :one
SELECT email
FROM users
WHERE id = $1
`

func (q *Queries) GetEmail(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getEmailVerified = `-- name: GetEmailVerified :one
SELECT email_verified
FROM users
WHERE id = $1
`

func (q *Queries) GetEmailVerified(ctx context.Context, id string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerified, id)
	var email_verified sql.NullBool
	err := row.Scan(&email_verified)
	return email_verified, err
}

const getPassword = `-- name: GetPassword :one
SELECT password 
FROM users
WHERE id = $1
`

func (q *Queries) GetPassword(ctx context.Context, id string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getPassword, id)
	var password sql.NullString
	err := row.Scan(&password)
	return password, err
}

const getUser = `-- name: GetUser :one
SELECT email_verified, password_changed_at, email, password, id, family_name, type, given_name, username 
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.Email,
		&i.Password,
		&i.ID,
		&i.FamilyName,
		&i.Type,
		&i.GivenName,
		&i.Username,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT email_verified, password_changed_at, email, password, id, family_name, type, given_name, username 
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.Email,
		&i.Password,
		&i.ID,
		&i.FamilyName,
		&i.Type,
		&i.GivenName,
		&i.Username,
	)
	return i, err
}

const getUserIDFromEmail = `-- name: GetUserIDFromEmail :one
SELECT id
FROM users
WHERE email = $1
`

func (q *Queries) GetUserIDFromEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserIDFromEmail, email)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserSuggestions = `-- name: GetUserSuggestions :many
SELECT email_verified, password_changed_at, email, password, id, family_name, type, given_name, username
FROM users
WHERE (LOWER(username)) LIKE (LOWER($1))
LIMIT 4
`

func (q *Queries) GetUserSuggestions(ctx context.Context, lower string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserSuggestions, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.EmailVerified,
			&i.PasswordChangedAt,
			&i.Email,
			&i.Password,
			&i.ID,
			&i.FamilyName,
			&i.Type,
			&i.GivenName,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       string
	Password sql.NullString
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updatePasswordChangedAt = `-- name: UpdatePasswordChangedAt :exec
UPDATE users
SET password_changed_at = $1
WHERE id = $2
`

type UpdatePasswordChangedAtParams struct {
	PasswordChangedAt sql.NullTime
	ID                string
}

func (q *Queries) UpdatePasswordChangedAt(ctx context.Context, arg UpdatePasswordChangedAtParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordChangedAt, arg.PasswordChangedAt, arg.ID)
	return err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE users
SET username = $1
WHERE id = $2
RETURNING email_verified, password_changed_at, email, password, id, family_name, type, given_name, username
`

type UpdateUsernameParams struct {
	Username sql.NullString
	ID       string
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.Username, arg.ID)
	var i User
	err := row.Scan(
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.Email,
		&i.Password,
		&i.ID,
		&i.FamilyName,
		&i.Type,
		&i.GivenName,
		&i.Username,
	)
	return i, err
}

const userIDExists = `-- name: UserIDExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)
`

func (q *Queries) UserIDExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userIDExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const usernameExists = `-- name: UsernameExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE (LOWER(username)) = $1)
`

func (q *Queries) UsernameExists(ctx context.Context, username sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, usernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE users
SET email_verified = TRUE
WHERE id = $1
`

func (q *Queries) VerifyEmail(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, verifyEmail, id)
	return err
}
