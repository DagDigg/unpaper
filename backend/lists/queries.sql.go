// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package lists

import (
	"context"
	"encoding/json"
)

const createList = `-- name: CreateList :one
INSERT INTO lists
(id, name, allowed_users, owner_user_id)
VALUES
($1, $2, $3, $4)
RETURNING allowed_users, id, name, owner_user_id
`

type CreateListParams struct {
	ID           string
	Name         string
	AllowedUsers json.RawMessage
	OwnerUserID  string
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList,
		arg.ID,
		arg.Name,
		arg.AllowedUsers,
		arg.OwnerUserID,
	)
	var i List
	err := row.Scan(
		&i.AllowedUsers,
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
	)
	return i, err
}

const getListByID = `-- name: GetListByID :one
SELECT allowed_users, id, name, owner_user_id FROM lists
WHERE id = $1
`

func (q *Queries) GetListByID(ctx context.Context, id string) (List, error) {
	row := q.db.QueryRowContext(ctx, getListByID, id)
	var i List
	err := row.Scan(
		&i.AllowedUsers,
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
	)
	return i, err
}

const getListsByOwnerID = `-- name: GetListsByOwnerID :many
SELECT allowed_users, id, name, owner_user_id FROM lists
WHERE owner_user_id = $1
`

func (q *Queries) GetListsByOwnerID(ctx context.Context, ownerUserID string) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getListsByOwnerID, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.AllowedUsers,
			&i.ID,
			&i.Name,
			&i.OwnerUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAllowedUsers = `-- name: UpdateAllowedUsers :one
UPDATE lists
SET
allowed_users = $1
WHERE id = $2
RETURNING allowed_users, id, name, owner_user_id
`

type UpdateAllowedUsersParams struct {
	AllowedUsers json.RawMessage
	ID           string
}

func (q *Queries) UpdateAllowedUsers(ctx context.Context, arg UpdateAllowedUsersParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateAllowedUsers, arg.AllowedUsers, arg.ID)
	var i List
	err := row.Scan(
		&i.AllowedUsers,
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
	)
	return i, err
}

const updateName = `-- name: UpdateName :one
UPDATE lists
SET name = $1
WHERE id = $2
RETURNING allowed_users, id, name, owner_user_id
`

type UpdateNameParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateName(ctx context.Context, arg UpdateNameParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateName, arg.Name, arg.ID)
	var i List
	err := row.Scan(
		&i.AllowedUsers,
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
	)
	return i, err
}
